<?xml version="1.0" encoding="UTF-8" ?>
<Module>
  <ModulePrefs title="Scratch Game Master" height="400">
    <Require feature="wave" />
  </ModulePrefs>
  <Content type="html">

<![CDATA[ 

<style>
#gadget {
  width: 550px;
  height: 400px;
  position: relative;
  background: #090;
  color: #9F9;
  line-height: 20px;
  font-size: 17px;
}
#output {
  width: 550px;
  min-height: 310px;
  background: #030;
  color: #0C0;
  position: absolute;
  left: 0;
  bottom: 70px;
}
#output img {
  width: 1em;
  height: 1em;
}
#input {
  width: 550px;
  height: 20px;
  border: none;
  background: #060;
  color: #3F3;
  position: absolute;
  left: 0;
  top: 330px;
}
#actions {
  width: auto;
  height: 50px;
  position: absolute;
  left: 0;
  bottom: 0;
}
#actions img {
  width: 50px;
  height: 50px;
}
#map {
  width: 550px;
  height: 400px;
  position: absolute;
  bottom: 380px;
  left: 0;
}
#initiative {
  position: absolute;
  top: 0;
  left: 0;
  background: #CFC;
  color: #030;
}
#initiative a {
  color: #060;
}
#initiative img {
  width: 1em;
  height: 1em;
}
.newTurn {
  color: #3F3;
  font-weight: 900;
}
</style>

<!-- end CSS style, begin HTML elements -->

<div id="gadget">

 <!-- console for typing in commands and text output -->
 <div id="output"></div>
 <input type="text" id="input" />

 <!-- graphical representation of game map -->
 <div id="map">
  <img src="http://ancientanddeadly.googlecode.com/svn/trunk/graphics/maps/forest-bg.png" style="position:absolute;top:0;left:0;"/>
  <img src="http://ancientanddeadly.googlecode.com/svn/trunk/graphics/maps/forest-fg.png" style="position:absolute;top:0;left:0;" />
  <a href="#" onclick="scrollUp('map')" style="position:absolute;bottom:0;right:0;color:#090;">hide/show map</a>
 </div>

 <!-- list of characters -->
 <div id="initiative">
  <table>
   <tr>
    <td><input type="radio" name="character"/></td>
    <td><img src="https://wave.google.com/wave/static/images/unknown.jpg"/></td>
    <td><a href="#">Zimzambamalam</a></td>
   </tr>
   <tr>
    <td><input type="radio" name="character"/></td>
    <td><img src="https://wave.google.com/wave/static/images/unknown.jpg"/></td>
    <td><a href="#">The Boss</a></td>
   </tr>
   <tr>
    <td><input type="radio" name="character"/></td>
    <td><img src="https://wave.google.com/wave/static/images/unknown.jpg"/></td>
    <td><a href="#">Skull Duggery</a></td>
   </tr>
   <tr>
    <td><input type="radio" name="character"/></td>
    <td><img src="https://wave.google.com/wave/static/images/unknown.jpg"/></td>
    <td><a href="#">Randalf the Pious</a></td>
   </tr>
  </table>
  <a href="#" onclick="scrollUp('initiative')">hide/show characters</a>
 </div>

 <!-- action icons -->
 <div id="actions">
  <img src="http://ancientanddeadly.googlecode.com/svn/trunk/graphics/icons/attack.png" />
  <img src="http://ancientanddeadly.googlecode.com/svn/trunk/graphics/icons/fighting.png" />
  <img src="http://ancientanddeadly.googlecode.com/svn/trunk/graphics/icons/fire-outline.png" />
  <img src="http://ancientanddeadly.googlecode.com/svn/trunk/graphics/icons/grab-color.png" />
  <img src="http://ancientanddeadly.googlecode.com/svn/trunk/graphics/icons/punch-color.png" />
  <img src="http://ancientanddeadly.googlecode.com/svn/trunk/graphics/icons/heal.png" />
  <img src="http://ancientanddeadly.googlecode.com/svn/trunk/graphics/escape.png" />
 </div>

</div>

<!-- end HTML elements, begin javascript code -->

<script src="http://gameartsguild.com/wave/util.js"></script>

<script type="text/javascript">

// global constants and variables
var HISTORY_LENGTH = 16; // number of rolls to remember
var input = document.getElementById("input"); // HTML text input
var output = document.getElementById('output'); // HTML output area

// pushes an absolutely positioned HTML element up and down 
function scrollUp(id) {
  var element = document.getElementById(id)
  if (getComputedStyle(element, null).bottom == "380px") {
    // the element is already scrolled up, so move it down
    element.style.bottom = "auto";
    element.style.top = "0";
  }
  else {
    // the element is down, so move it up, leaving 20 pixels
    // visible at the top of the 400 pixel high screen
    element.style.top = "auto";
    element.style.bottom = "380px";
  }
}

// convert special die notations to standard xdy form
function normalizeRoll(text) {
  // convert d% to d100
  text = text.replace(/d%/gi, "d100");
  // convert 1d, 2d, 3d, 4d ... to 1d6, 2d6, 3d6, 4d6 ...
  text = text.replace(/([0-9]+)d(?!\d)/gi, "$1d6");
  // convert d4, d6, d8, d10 ... to 1d4, 1d6, 1d8, 1d10 ...
  text = text.replace(/(^|[^0-9])d([0-9]+)/gi, "$11d$2");
  return text;
}

// simulates rolling a given number of dice with a given number of sides
function d(dice, sides) {
  var sum = 0;
  for (var i = 0; i < dice; i++)
    sum += Math.floor((Math.random() * sides) + 1);
  return sum;
}

// evaluates an expression which can contain d notation,
// arithmetic, and even javascript code
function roll(text) {
  text = normalizeRoll(text); // convert special die notations
  // replace d notation with calls to d() function
  text = text.replace(/(\d+)d(\d+)/gi, "d($1,$2)");
  eval("result = " + text);
  return result;
}

// expands individual die rolls into random numbers
// for example "3d6" might become "(5 + 1 + 3)"
function rollSubtotal(text) {

  text = normalizeRoll(text); // convert special die notations

  // split expression into dice, sides, and surrounding text
  // for example "1d20 + 8" becomes ["","1","20"," + 8"]
  var parts = text.split(/([0-9]+)d([0-9]+)/gi);

  // roll dice and combine the results into the subtotal
  var subtotal = parts[0];
  for(var i = 1; i < parts.length; i += 3) {
    var rolls = [];
    for (j = 0; j < parts[i]; j++)
      rolls.push(Math.floor((Math.random() * parts[i + 1]) + 1));
    subtotal += "(" + rolls.join(" + ") + ")" + parts[i + 2];
  }
  return subtotal;
}

// interpret the input as a die roll containing d notation
// addition and subtraction. die rolls have higher priority
// than arithmetic and grouping by parentheses is not supported
function rollInput() {
  var text = input.value; // get input text
  var subtotal = rollSubtotal(text); // roll dice
  eval("total = " + subtotal); // calculate total
  var history = load("history", []); // get history from wave state
  history.push({ // add a new object to the end of the history
    "id": wave.getViewer().getId(), 
    "roll": text, 
    "subtotal": subtotal,
    "total": total});
  // remove first item from history if it is too long
  if (history.length > HISTORY_LENGTH) history.shift();
  save("history", history); // save history
}

// called when the wave state is loaded or changes
function stateUpdated() {
  // generate HTML code from history items
  var html = '';
  var history = load("history", []);
  for (var i = 0; i < history.length; i++) {
    // add a single-row table with the user's portrait, name and roll
    var participant = wave.getParticipantById(history[i].id);
    html += '<div><img src="' + participant.getThumbnailUrl() + '"/></td>';
    html += ' <i>' + participant.getDisplayName() + '</i> ' + history[i].roll;
    if (history[i].subtotal != history[i].roll)
      html += ' = ' + history[i].subtotal;
    html += ' = ' + history[i].total + '</div>';
    html += '<div class="newTurn">next characters turn:</div>';
  }
  // show the HTML code in the output element
  if (html) output.innerHTML = html;
}

// initialize app
function init() {
  // set handler functions which are triggered by wave events
  if (wave && wave.isInWaveContainer())
    wave.setStateCallback(stateUpdated);
}

// run init when the wave is done loading
gadgets.util.registerOnLoadHandler(init);

// assign an (anonymous) handler function for key presses
onkeydown = function (event) {
  var key = event.keyCode || event.charCode;
  if (key == 13) rollInput(); // enter key
}

</script>

]]> 

  </Content>
</Module>

