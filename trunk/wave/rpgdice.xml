<?xml version="1.0" encoding="UTF-8" ?> 
<Module>
  <ModulePrefs title="Wave Dice Gadget" height="160">
    <Require feature="wave" /> 
  </ModulePrefs>
<Content type="html">

<![CDATA[ 

<style>
#frame {
  position: relative;
  width: 100%;
  height: 100%;
  background-color: #EEE;
}
#output {
  position: absolute;
  left: 3px;
  bottom: 3px;
  width: auto;
}
#output img {
  width: 1em;
  height: 1em;
}
#input {
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
}
</style>

<div id="frame">
<div id="output">No rolls yet</div>
<input type=text value="1d20 + 8" id="input"/>
</div>

<script src="http://ancientanddeadly.googlecode.com/svn/trunk/wave/util.js"></script>

<script type="text/javascript">

var HISTORY_LENGTH = 6; // number of rolls to remember
var input = document.getElementById("input"); // HTML text input
var output = document.getElementById('output'); // HTML output area

// convert special die notations to standard xdy form
function normalizeRoll(text) {
  // convert d% to d100
  text = text.replace(/d%/gi, "d100");
  // convert 1d, 2d, 3d, 4d ... to 1d6, 2d6, 3d6, 4d6 ...
  text = text.replace(/([0-9]+)d(?!\d)/gi, "$1d6");
  // convert d4, d6, d8, d10 ... to 1d4, 1d6, 1d8, 1d10 ...
  text = text.replace(/(^|[^0-9])d([0-9]+)/gi, "$11d$2");
  return text;
}

// simulates rolling a given number of dice with a given number of sides
function d(dice, sides) {
  var sum = 0;
  for (var i = 0; i < dice; i++)
    sum += Math.floor((Math.random() * sides) + 1);
  return sum;
}

// evaluates an expression which can contain d notation,
// arithmetic, and even javascript code
function roll(text) {
  text = normalizeRoll(text); // convert special die notations
  // replace d notation with calls to d() function
  text = text.replace(/(\d+)d(\d+)/gi, "d($1,$2)");
  eval("result = " + text);
  return result;
}

// expands individual die rolls into random numbers
// for example "3d6" might become "(5 + 1 + 3)"
function rollSubtotal(text) {

  text = normalizeRoll(text); // convert special die notations

  // split expression into dice, sides, and surrounding text
  // for example "1d20 + 8" becomes ["","1","20"," + 8"]
  var parts = text.split(/([0-9]+)d([0-9]+)/gi);

  // roll dice and combine the results into the subtotal
  var subtotal = parts[0];
  for(var i = 1; i < parts.length; i += 3) {
    var rolls = [];
    for (j = 0; j < parts[i]; j++)
      rolls.push(Math.floor((Math.random() * parts[i + 1]) + 1));
    subtotal += "(" + rolls.join(" + ") + ")" + parts[i + 2];
  }
  return subtotal;
}

// interpret the input as a die roll containing d notation
// addition and subtraction. die rolls have higher priority
// than arithmetic and grouping by parentheses is not supported
function rollInput() {
  var text = input.value; // get input text
  var subtotal = rollSubtotal(text); // roll dice
  eval("total = " + subtotal); // calculate total
  var history = load("history", []); // get history from wave state
  history.push({ // add a new object to the end of the history
    "id": wave.getViewer().getId(), 
    "roll": text, 
    "subtotal": subtotal,
    "total": total});
  // remove first item from history if it is too long
  if (history.length > HISTORY_LENGTH) history.shift();
  save("history", history); // save history
}

// called when the wave state is loaded or changes
function stateUpdated() {
  // generate HTML code from history items
  var html = '';
  var history = load("history", []);
  for (var i = 0; i < history.length; i++) {
    // add a single-row table with the user's portrait, name and roll
    var participant = wave.getParticipantById(history[i].id);
    html += '<div><img src="' + participant.getThumbnailUrl() + '"/></td>'
      + ' <i>' + participant.getDisplayName() + '</i> ' + history[i].roll 
      + ' = ' + history[i].subtotal + ' = ' + history[i].total + '</div>';
  }
  // show the HTML code in the output element
  if (html) output.innerHTML = html;
}

// initialize app
function init() {
  // set handler functions which are triggered by wave events
  if (wave && wave.isInWaveContainer())
    wave.setStateCallback(stateUpdated);
}

// run init when the wave is done loading
gadgets.util.registerOnLoadHandler(init);

// assign an (anonymous) handler function for key presses
onkeydown = function (event) {
  var key = event.keyCode || event.charCode;
  if (key == 13) rollInput(); // enter key
}

</script>

]]> 

  </Content>
</Module>
