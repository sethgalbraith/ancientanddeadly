<?xml version="1.0" encoding="UTF-8" ?> 
<Module>
  <ModulePrefs title="Wave Javascript Shell" height="400">
    <Require feature="wave" /> 
  </ModulePrefs>
<Content type="html">
<![CDATA[ 

<style>
#shell-output {
}
#shell-input {
  width: 100%;
  background-color: transparent;
  border: none;
  font-size: 100%;
}
#shell-console {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
}
#shell-container {
  position: relative;
  background-color: #CFC;
  width: 100%;
  height: 100%;
}
</style>

<div id="shell-container">
  <div id="shell-console">
    <div id="shell-output">type help() for instructions</div>
    <input id="shell-input" type="text"></input>
  </div>
</div>

<script src="http://ancientanddeadly.googlecode.com/svn/trunk/wave/util.js"></script>

<script type="text/javascript">

function echo(value) {stdout += value}

function help() {
  echo("help() - show this help info\n"
   + "echo(string) - prints the string to the console\n"
   + "clear() - empties the console\n"
   + "color(fg, bg) - sets the console colors\n"
   + "load(key) - retrieves the state named key\n"
   + "load(key, default) - retrieves a state with a default value\n"
   + "save(key, value) - stores value in the state named key\n"
   + "saveAll(values) - saves the state of each attribute in values")
}

function clear() {clear_console = true}

function color(fg, bg) {
  saveAll({"console-background": bg, "console-foreground": fg})
}

function stateUpdated() {
  var fg = load("console-foreground", "#OOO")
  var bg = load("console-background", "#CFC")
  var container = document.getElementById("shell-container")
  container.style.backgroundColor = bg
  container.style.color = fg
  document.getElementById("shell-input").style.color = fg
  var output = load("console-output")
  if (output) {
    output = output.replace(/\n/g, "<br/>")
    output = output.replace(/\t/g, "&nbsp;&nbsp;&nbsp;&nbsp;")
    output = output.replace(/  /g, "&nbsp; ")
    document.getElementById("shell-output").innerHTML = output
  }
}

function init() {
  if (wave && wave.isInWaveContainer())
    wave.setStateCallback(stateUpdated)
}

gadgets.util.registerOnLoadHandler(init);

var cursor = 0
var stdout = ""
var clear_console = false

onkeydown = function (event) {
  var key = event.keyCode || event.charCode
  var input = document.getElementById("shell-input")
  if (key == 13) { // enter key
    var command = input.value
    if (command) {
      stdout = wave.getViewer().getDisplayName() + ": "
        + escapeXML(command) + "\n"
      clear_console = false
      eval("result = " + command)
      if (clear_console) {
        save("console-output", "")
        document.getElementById("shell-output").innerHTML = ""
      }
      else {
        if (typeof(result) != "undefined")
          stdout += escapeXML(jsonEncode(result))
        var lines  = load("console-length", 25)
        var output = load("console-output", "")
        output = (output + "\n" + stdout).split("\n")
        if (output.length > lines)
          output = output.slice(output.length - lines, output.length)
        save("console-output", output.join("\n"))
      }
      var history = load("console-history", [])
      history.push(command)
      save("console-history", history)
      document.getElementById("shell-input").value = ""
    }
  }
  else if (key == 38) { // up arrow
    var history = load("console-history", [])
    cursor = Math.min(history.length, cursor + 1)
    if (cursor) input.value = history[history.length - cursor]
  }
  else if (key == 40) { // down arrow
    var history = load("console-history", [])
    cursor = Math.max(0, cursor - 1)
    input.value = cursor ? history[history.length - cursor] : 0
  }
}

</script>
]]> 
  </Content>
</Module>
